Question:

Given a function fn, return a memoized version of that function.

A memoized function is a function that will never be called twice with the same inputs. Instead it will return a cached value.

You can assume there are 3 possible input functions: sum, fib, and factorial.

sum accepts two integers a and b and returns a + b. Assume that if a value has already been cached for the arguments (b, a) where a != b, it cannot be used for the arguments (a, b). For example, if the arguments are (3, 2) and (2, 3), two separate calls should be made.
fib accepts a single integer n and returns 1 if n <= 1 or fib(n - 1) + fib(n - 2) otherwise.
factorial accepts a single integer n and returns 1 if n <= 1 or factorial(n - 1) * n otherwise.

Solution:

function memoize(fn) {
    const cache = {};
    let callCount = 0;

    const memoizedFn = (...args) => {
        const key = JSON.stringify(args); 
        if (cache[key] !== undefined) {
            return cache[key];
        }
        callCount++;
        const result = fn(...args);
        cache[key] = result;
        return result;
    };

    memoizedFn.getCallCount = () => callCount;

    return memoizedFn;
}

const sum = (a, b) => a + b;
const fib = (n) => (n <= 1 ? 1 : fib(n - 1) + fib(n - 2));
const factorial = (n) => (n <= 1 ? 1 : n * factorial(n - 1));

function testMemoization(fnName, actions, values) {
    let fn;
    if (fnName === "sum") fn = sum;
    if (fnName === "fib") fn = fib;
    if (fnName === "factorial") fn = factorial;

    const memoizedFn = memoize(fn);
    const results = [];

    for (let i = 0; i < actions.length; i++) {
        const action = actions[i];
        const value = values[i];

        if (action === "call") {
            results.push(memoizedFn(...value));
        } else if (action === "getCallCount") {
            results.push(memoizedFn.getCallCount());
        }
    }

    return results;
}

