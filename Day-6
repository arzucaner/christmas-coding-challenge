Question:

Write a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key.

The class has three public methods:

set(key, value, duration): accepts an integer key, an integer value, and a duration in milliseconds. Once the duration has elapsed, the key should be inaccessible. The method should return true if the same un-expired key already exists and false otherwise. Both the value and duration should be overwritten if the key already exists.

get(key): if an un-expired key exists, it should return the associated value. Otherwise it should return -1.

count(): returns the count of un-expired keys.

Solution:

class TimeLimitedCache {
    constructor() {
        this.cache = new Map();
    }

    set(key, value, duration) {
        const now = Date.now();
        const isExistingKey = this.cache.has(key) && this.cache.get(key).expiration > now;

        const expiration = now + duration;
        this.cache.set(key, { value, expiration });

        setTimeout(() => {
            if (this.cache.get(key)?.expiration === expiration) {
                this.cache.delete(key);
            }
        }, duration);

        return isExistingKey;
    }

    get(key) {
        const entry = this.cache.get(key);
        if (entry && entry.expiration > Date.now()) {
            return entry.value;
        }
        return -1;
    }

    count() {
        const now = Date.now();
        let count = 0;

        for (const { expiration } of this.cache.values()) {
            if (expiration > now) {
                count++;
            }
        }

        return count;
    }
}
